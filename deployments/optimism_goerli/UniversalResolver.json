{
  "address": "0x62a87A519dab75e89f0a5c84EA062838aB21015b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract DNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x797b80193b847c4d1c240136d7d92696c925af96a2f6f8b9e506bdd39e6743a3",
  "receipt": {
    "to": null,
    "from": "0xA9a0b118Fa40eDade12266dC694061dc7Dba4750",
    "contractAddress": "0x62a87A519dab75e89f0a5c84EA062838aB21015b",
    "transactionIndex": 1,
    "gasUsed": "1562334",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9f68abb3f0c1cf60183a8de5cf65374687e4abf92d0e6474c5096b7714cd6aa3",
    "transactionHash": "0x797b80193b847c4d1c240136d7d92696c925af96a2f6f8b9e506bdd39e6743a3",
    "logs": [],
    "blockNumber": 4599801,
    "cumulativeGasUsed": "1562334",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5340A746A6A9990Bc855214c5a90f3a5851B0d7B"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b18f6271c7bf03e952f5ac536f97678",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findResolver(bytes)\":{\"details\":\"Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.\",\"params\":{\"name\":\"The name to resolve, in DNS-encoded and normalised form.\"},\"returns\":{\"_0\":\"The Resolver responsible for this name, and the namehash of the full name.\"}},\"resolve(bytes,bytes)\":{\"details\":\"Performs DNS name resolution for the supplied name and resolution data.\",\"params\":{\"data\":\"The resolution data, as specified in DNSIP-10.\",\"name\":\"The name to resolve, in normalised and DNS-encoded form.\"},\"returns\":{\"_0\":\"The result of resolving the name.\"}},\"resolveCallback(bytes,bytes)\":{\"details\":\"Callback function for `resolve`.\",\"params\":{\"extraData\":\"Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.\",\"response\":\"Response data returned by the target address that invoked the inner `OffchainData` revert.\"}},\"reverse(bytes)\":{\"details\":\"Performs DNS name reverse resolution for the supplied reverse name.\",\"params\":{\"reverseName\":\"The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\"},\"returns\":{\"_0\":\"The resolved name, the resolved address, the reverse resolver address, and the resolver address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an DNS name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/DNS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface DNS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaabb710f41bcd35db31b3a5d77169e0db9f0b63996ad9e07192a064ec16046cf\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./profiles/IABIResolver.sol\\\";\\r\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\r\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\r\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\r\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\r\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\r\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\r\\nimport \\\"./profiles/INameResolver.sol\\\";\\r\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\r\\nimport \\\"./profiles/ITextResolver.sol\\\";\\r\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\r\\n\\r\\n/**\\r\\n * A generic resolver interface which includes all the functions including the ones deprecated\\r\\n */\\r\\ninterface Resolver is\\r\\n    IERC165,\\r\\n    IABIResolver,\\r\\n    IAddressResolver,\\r\\n    IAddrResolver,\\r\\n    IContentHashResolver,\\r\\n    IDNSRecordResolver,\\r\\n    IDNSZoneResolver,\\r\\n    IInterfaceResolver,\\r\\n    INameResolver,\\r\\n    IPubkeyResolver,\\r\\n    ITextResolver,\\r\\n    IExtendedResolver\\r\\n{\\r\\n    /* Deprecated events */\\r\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\r\\n\\r\\n    function setABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentType,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function setAddr(bytes32 node, address addr) external;\\r\\n\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType,\\r\\n        bytes calldata a\\r\\n    ) external;\\r\\n\\r\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\r\\n\\r\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\r\\n\\r\\n    function setName(bytes32 node, string calldata _name) external;\\r\\n\\r\\n    function setPubkey(\\r\\n        bytes32 node,\\r\\n        bytes32 x,\\r\\n        bytes32 y\\r\\n    ) external;\\r\\n\\r\\n    function setText(\\r\\n        bytes32 node,\\r\\n        string calldata key,\\r\\n        string calldata value\\r\\n    ) external;\\r\\n\\r\\n    function setInterface(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID,\\r\\n        address implementer\\r\\n    ) external;\\r\\n\\r\\n    function multicall(bytes[] calldata data)\\r\\n        external\\r\\n        returns (bytes[] memory results);\\r\\n\\r\\n    function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data)\\r\\n        external\\r\\n        returns (bytes[] memory results);\\r\\n\\r\\n    /* Deprecated functions */\\r\\n    function content(bytes32 node) external view returns (bytes32);\\r\\n\\r\\n    function multihash(bytes32 node) external view returns (bytes memory);\\r\\n\\r\\n    function setContent(bytes32 node, bytes32 hash) external;\\r\\n\\r\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc2ca29677f763e8c5ade8c9a4173584a1eae8130f3a79b5bfb1a850e4c6242b1\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\r\\n\\r\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\r\\n    mapping(bytes32 => uint64) public recordVersions;\\r\\n\\r\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        require(isAuthorised(node));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an DNS node.\\r\\n     * May only be called by the owner of that node in the DNS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        recordVersions[node]++;\\r\\n        emit VersionChanged(node, recordVersions[node]);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80e51723653e1ebdc16e9d3d769cc41e3f6062f21fab0478d21fff3f8f6f5bd4\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./IABIResolver.sol\\\";\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\n\\r\\ninterface IABIResolver {\\r\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\r\\n\\r\\n    /**\\r\\n     * Returns the ABI associated with an DNS node.\\r\\n     * Defined in EIP205.\\r\\n     * @param node The DNS node to query\\r\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\r\\n     * @return contentType The content type of the return value\\r\\n     * @return data The ABI data\\r\\n     */\\r\\n    function ABI(bytes32 node, uint256 contentTypes)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x33aea2ee7375e3109e35a4cdf2caa01b3c2ffaa6d6c32cdb2556efd3c7fec337\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an DNS node.\\r\\n     * @param node The DNS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0x2018ab19d1a8ab3fd17a81c8600cdac1de65529daa3ceeeaa6c7800830b2ce20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the new (multicoin) addr function.\\r\\n */\\r\\ninterface IAddressResolver {\\r\\n    event AddressChanged(\\r\\n        bytes32 indexed node,\\r\\n        uint256 coinType,\\r\\n        bytes newAddress\\r\\n    );\\r\\n\\r\\n    function addr(bytes32 node, uint256 coinType)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x784c3ee0b979a9be20958a63fb17c2f652d3acf99dccb3ceba1f4c54e0278aa9\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IContentHashResolver {\\r\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\r\\n\\r\\n    /**\\r\\n     * Returns the contenthash associated with an DNS node.\\r\\n     * @param node The DNS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x6eb32bbf21082c9cd3eb178e1d18fb678dc13281f95a47cfeceb6d33e14ad4b5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSRecordResolver {\\r\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\r\\n    event DNSRecordChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        uint16 resource,\\r\\n        bytes record\\r\\n    );\\r\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\r\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\r\\n\\r\\n    /**\\r\\n     * Obtain a DNS record.\\r\\n     * @param node the namehash of the node for which to fetch the record\\r\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\r\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\r\\n     * @return the DNS record in wire format if present, otherwise empty\\r\\n     */\\r\\n    function dnsRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 name,\\r\\n        uint16 resource\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd08097a7b1fb907dd8a031fffbb964ee392639d40f00a83a499f16b8ef03fe11\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSZoneResolver {\\r\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\r\\n    event DNSZonehashChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes lastzonehash,\\r\\n        bytes zonehash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * zonehash obtains the hash for the zone.\\r\\n     * @param node The DNS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xa45af369c5d868eb5220c06292b5f8de4081f8e632c4cc211c197981c6e9db9f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IExtendedResolver {\\r\\n    function resolve(bytes memory name, bytes memory data)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x58349f49c43aaab9250e3b5d5ad59916373d90c7467cbe3a87457b77aec0d229\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IInterfaceResolver {\\r\\n    event InterfaceChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes4 indexed interfaceID,\\r\\n        address implementer\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the address of a contract that implements the specified interface for this name.\\r\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\r\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\r\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\r\\n     * will be returned.\\r\\n     * @param node The DNS node to query.\\r\\n     * @param interfaceID The EIP 165 interface ID to check for.\\r\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\r\\n     */\\r\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0f47d33f2cd6a159f5105aaad83d69427bee9defca1a4d335809473cd3112fa6\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface INameResolver {\\r\\n    event NameChanged(bytes32 indexed node, string name);\\r\\n\\r\\n    /**\\r\\n     * Returns the name associated with an DNS node, for reverse records.\\r\\n     * Defined in EIP181.\\r\\n     * @param node The DNS node to query.\\r\\n     * @return The associated name.\\r\\n     */\\r\\n    function name(bytes32 node) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x6e104a034c113cebba1717a454a1a7949b4543c35d736996a38b2e63d85e7c6d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IPubkeyResolver {\\r\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\r\\n\\r\\n    /**\\r\\n     * Returns the SECP256k1 public key associated with an DNS node.\\r\\n     * Defined in EIP 619.\\r\\n     * @param node The DNS node to query\\r\\n     * @return x The X coordinate of the curve point for the public key.\\r\\n     * @return y The Y coordinate of the curve point for the public key.\\r\\n     */\\r\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\r\\n}\\r\\n\",\"keccak256\":\"0xfe2a28f2f51704f2ecf012cccf796478f0627cf78f3cf4fd5ef79158fa799f8b\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface ITextResolver {\\r\\n    event TextChanged(\\r\\n        bytes32 indexed node,\\r\\n        string indexed indexedKey,\\r\\n        string key,\\r\\n        string value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the text data associated with an DNS node and key.\\r\\n     * @param node The DNS node to query.\\r\\n     * @param key The text data key to query.\\r\\n     * @return The associated text data.\\r\\n     */\\r\\n    function text(bytes32 node, string calldata key)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xb4d68e3e1414dc5398b3a57cb1f033faba4bea179a3906b1da2577b796eea0a7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IVersionableResolver {\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    function recordVersions(bytes32 node) external view returns (uint64);\\r\\n}\\r\\n\",\"keccak256\":\"0x5f1b4de08824e89dd4a8e8aef8c96cfddd8579ac25e9fbb6e1efb14ba23ddea7\",\"license\":\"MIT\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nlibrary LowLevelCallUtils {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\r\\n     *      `returnDataSize` and `readReturnData`.\\r\\n     * @param target The address to staticcall.\\r\\n     * @param data The data to pass to the call.\\r\\n     * @return success True if the call succeeded, or false if it reverts.\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            target.isContract(),\\r\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\r\\n        );\\r\\n        assembly {\\r\\n            success := staticcall(\\r\\n                gas(),\\r\\n                target,\\r\\n                add(data, 32),\\r\\n                mload(data),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the size of the return data of the most recent external call.\\r\\n     */\\r\\n    function returnDataSize() internal pure returns (uint256 len) {\\r\\n        assembly {\\r\\n            len := returndatasize()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reads return data from the most recent external call.\\r\\n     * @param offset Offset into the return data.\\r\\n     * @param length Number of bytes to return.\\r\\n     */\\r\\n    function readReturnData(uint256 offset, uint256 length)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory data)\\r\\n    {\\r\\n        data = new bytes(length);\\r\\n        assembly {\\r\\n            returndatacopy(add(data, 32), offset, length)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts with the return data from the most recent external call.\\r\\n     */\\r\\n    function propagateRevert() internal pure {\\r\\n        assembly {\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            revert(0, returndatasize())\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x762ce95e26ab52cd6df6f715b308e365a83e65f9536b3374a9ed64718bc642b0\",\"license\":\"MIT\"},\"contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\r\\n\\r\\nlibrary NameEncoder {\\r\\n    using BytesUtils for bytes;\\r\\n\\r\\n    function dnsEncodeName(string memory name)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory dnsName, bytes32 node)\\r\\n    {\\r\\n        uint8 labelLength = 0;\\r\\n        bytes memory bytesName = bytes(name);\\r\\n        uint256 length = bytesName.length;\\r\\n        dnsName = new bytes(length + 2);\\r\\n        node = 0;\\r\\n        if (length == 0) {\\r\\n            dnsName[0] = 0;\\r\\n            return (dnsName, node);\\r\\n        }\\r\\n\\r\\n        // use unchecked to save gas since we check for an underflow\\r\\n        // and we check for the length before the loop\\r\\n        unchecked {\\r\\n            for (uint256 i = length - 1; i >= 0; i--) {\\r\\n                if (bytesName[i] == \\\".\\\") {\\r\\n                    dnsName[i + 1] = bytes1(labelLength);\\r\\n                    node = keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            node,\\r\\n                            bytesName.keccak(i + 1, labelLength)\\r\\n                        )\\r\\n                    );\\r\\n                    labelLength = 0;\\r\\n                } else {\\r\\n                    labelLength += 1;\\r\\n                    dnsName[i + 1] = bytesName[i];\\r\\n                }\\r\\n                if (i == 0) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        node = keccak256(\\r\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\r\\n        );\\r\\n\\r\\n        dnsName[0] = bytes1(labelLength);\\r\\n        return (dnsName, node);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x27b2a1b360fe1417e98bd0e8852ed0fe13615f85b198142493da6ef0dc4a2a70\",\"license\":\"MIT\"},\"contracts/utils/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {LowLevelCallUtils} from \\\"./LowLevelCallUtils.sol\\\";\\r\\nimport {DNS} from \\\"../registry/DNS.sol\\\";\\r\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\r\\nimport {Resolver, INameResolver, IAddrResolver} from \\\"../resolvers/Resolver.sol\\\";\\r\\nimport {NameEncoder} from \\\"./NameEncoder.sol\\\";\\r\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\r\\n\\r\\nerror OffchainLookup(\\r\\n    address sender,\\r\\n    string[] urls,\\r\\n    bytes callData,\\r\\n    bytes4 callbackFunction,\\r\\n    bytes extraData\\r\\n);\\r\\n\\r\\n/**\\r\\n * The Universal Resolver is a contract that handles the work of resolving a name entirely onchain,\\r\\n * making it possible to make a single smart contract call to resolve an DNS name.\\r\\n */\\r\\ncontract UniversalResolver is IExtendedResolver, ERC165 {\\r\\n    using Address for address;\\r\\n    using NameEncoder for string;\\r\\n    using BytesUtils for bytes;\\r\\n\\r\\n    DNS public immutable registry;\\r\\n\\r\\n    constructor(address _registry) {\\r\\n        registry = DNS(_registry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs DNS name resolution for the supplied name and resolution data.\\r\\n     * @param name The name to resolve, in normalised and DNS-encoded form.\\r\\n     * @param data The resolution data, as specified in DNSIP-10.\\r\\n     * @return The result of resolving the name.\\r\\n     */\\r\\n    function resolve(bytes calldata name, bytes memory data)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bytes memory, address)\\r\\n    {\\r\\n        (Resolver resolver, ) = findResolver(name);\\r\\n        if (address(resolver) == address(0)) {\\r\\n            return (\\\"\\\", address(0));\\r\\n        }\\r\\n\\r\\n        try\\r\\n            resolver.supportsInterface(type(IExtendedResolver).interfaceId)\\r\\n        returns (bool supported) {\\r\\n            if (supported) {\\r\\n                return (\\r\\n                    callWithOffchainLookupPropagation(\\r\\n                        address(resolver),\\r\\n                        abi.encodeCall(IExtendedResolver.resolve, (name, data)),\\r\\n                        UniversalResolver.resolveCallback.selector\\r\\n                    ),\\r\\n                    address(resolver)\\r\\n                );\\r\\n            }\\r\\n        } catch {}\\r\\n        return (\\r\\n            callWithOffchainLookupPropagation(\\r\\n                address(resolver),\\r\\n                data,\\r\\n                UniversalResolver.resolveCallback.selector\\r\\n            ),\\r\\n            address(resolver)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs DNS name reverse resolution for the supplied reverse name.\\r\\n     * @param reverseName The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\\r\\n     * @return The resolved name, the resolved address, the reverse resolver address, and the resolver address.\\r\\n     */\\r\\n    function reverse(bytes calldata reverseName)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory,\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            bytes memory resolvedReverseData,\\r\\n            address reverseResolverAddress\\r\\n        ) = this.resolve(\\r\\n                reverseName,\\r\\n                abi.encodeCall(INameResolver.name, reverseName.namehash(0))\\r\\n            );\\r\\n\\r\\n        string memory resolvedName = abi.decode(resolvedReverseData, (string));\\r\\n\\r\\n        (bytes memory encodedName, bytes32 namehash) = resolvedName\\r\\n            .dnsEncodeName();\\r\\n\\r\\n        (bytes memory resolvedData, address resolverAddress) = this.resolve(\\r\\n            encodedName,\\r\\n            abi.encodeCall(IAddrResolver.addr, namehash)\\r\\n        );\\r\\n\\r\\n        address resolvedAddress = abi.decode(resolvedData, (address));\\r\\n\\r\\n        return (\\r\\n            resolvedName,\\r\\n            resolvedAddress,\\r\\n            reverseResolverAddress,\\r\\n            resolverAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Makes a call to `target` with `data`. If the call reverts with an `OffchainLookup` error, wraps\\r\\n     *      the error with the data necessary to continue the request where it left off.\\r\\n     * @param target The address to call.\\r\\n     * @param data The data to call `target` with.\\r\\n     * @param callbackFunction The function ID of a function on this contract to use as an EIP 3668 callback.\\r\\n     *        This function's `extraData` argument will be passed `(address target, bytes4 innerCallback, bytes innerExtraData)`.\\r\\n     * @return ret If `target` did not revert, contains the return data from the call to `target`.\\r\\n     */\\r\\n    function callWithOffchainLookupPropagation(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        bytes4 callbackFunction\\r\\n    ) internal view returns (bytes memory ret) {\\r\\n        bool result = LowLevelCallUtils.functionStaticCall(target, data);\\r\\n        uint256 size = LowLevelCallUtils.returnDataSize();\\r\\n\\r\\n        if (result) {\\r\\n            return LowLevelCallUtils.readReturnData(0, size);\\r\\n        }\\r\\n\\r\\n        // Failure\\r\\n        if (size >= 4) {\\r\\n            bytes memory errorId = LowLevelCallUtils.readReturnData(0, 4);\\r\\n            if (bytes4(errorId) == OffchainLookup.selector) {\\r\\n                // Offchain lookup. Decode the revert message and create our own that nests it.\\r\\n                bytes memory revertData = LowLevelCallUtils.readReturnData(\\r\\n                    4,\\r\\n                    size - 4\\r\\n                );\\r\\n                (\\r\\n                    address sender,\\r\\n                    string[] memory urls,\\r\\n                    bytes memory callData,\\r\\n                    bytes4 innerCallbackFunction,\\r\\n                    bytes memory extraData\\r\\n                ) = abi.decode(\\r\\n                        revertData,\\r\\n                        (address, string[], bytes, bytes4, bytes)\\r\\n                    );\\r\\n                if (sender == target) {\\r\\n                    revert OffchainLookup(\\r\\n                        address(this),\\r\\n                        urls,\\r\\n                        callData,\\r\\n                        callbackFunction,\\r\\n                        abi.encode(sender, innerCallbackFunction, extraData)\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        LowLevelCallUtils.propagateRevert();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Callback function for `resolve`.\\r\\n     * @param response Response data returned by the target address that invoked the inner `OffchainData` revert.\\r\\n     * @param extraData Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.\\r\\n     */\\r\\n    function resolveCallback(bytes calldata response, bytes calldata extraData)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        (\\r\\n            address target,\\r\\n            bytes4 innerCallbackFunction,\\r\\n            bytes memory innerExtraData\\r\\n        ) = abi.decode(extraData, (address, bytes4, bytes));\\r\\n        return\\r\\n            abi.decode(\\r\\n                target.functionStaticCall(\\r\\n                    abi.encodeWithSelector(\\r\\n                        innerCallbackFunction,\\r\\n                        response,\\r\\n                        innerExtraData\\r\\n                    )\\r\\n                ),\\r\\n                (bytes)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finds a resolver by recursively querying the registry, starting at the longest name and progressively\\r\\n     *      removing labels until it finds a result.\\r\\n     * @param name The name to resolve, in DNS-encoded and normalised form.\\r\\n     * @return The Resolver responsible for this name, and the namehash of the full name.\\r\\n     */\\r\\n    function findResolver(bytes calldata name)\\r\\n        public\\r\\n        view\\r\\n        returns (Resolver, bytes32)\\r\\n    {\\r\\n        (address resolver, bytes32 labelhash) = findResolver(name, 0);\\r\\n        return (Resolver(resolver), labelhash);\\r\\n    }\\r\\n\\r\\n    function findResolver(bytes calldata name, uint256 offset)\\r\\n        internal\\r\\n        view\\r\\n        returns (address, bytes32)\\r\\n    {\\r\\n        uint256 labelLength = uint256(uint8(name[offset]));\\r\\n        if (labelLength == 0) {\\r\\n            return (address(0), bytes32(0));\\r\\n        }\\r\\n        uint256 nextLabel = offset + labelLength + 1;\\r\\n        bytes32 labelHash = keccak256(name[offset + 1:nextLabel]);\\r\\n        (address parentresolver, bytes32 parentnode) = findResolver(\\r\\n            name,\\r\\n            nextLabel\\r\\n        );\\r\\n        bytes32 node = keccak256(abi.encodePacked(parentnode, labelHash));\\r\\n        address resolver = registry.resolver(node);\\r\\n        if (resolver != address(0)) {\\r\\n            return (resolver, node);\\r\\n        }\\r\\n        return (parentresolver, node);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1e3b6201d7c5684db9968ee0760a88e829f0e20c60e88b0c12e4d9ee6e0ba69\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the DNS namehash of a DNS-encoded name.\\r\\n     * @param self The DNS-encoded name to hash.\\r\\n     * @param offset The offset at which to start hashing.\\r\\n     * @return The namehash of the name.\\r\\n     */\\r\\n    function namehash(bytes memory self, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\r\\n        if (labelhash == bytes32(0)) {\\r\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\r\\n            return bytes32(0);\\r\\n        }\\r\\n        return\\r\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\r\\n     * @param self The byte string to read a label from.\\r\\n     * @param idx The index to read a label at.\\r\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\r\\n     * @return newIdx The index of the start of the next label.\\r\\n     */\\r\\n    function readLabel(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 labelhash, uint256 newIdx)\\r\\n    {\\r\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\r\\n        uint256 len = uint256(uint8(self[idx]));\\r\\n        if (len > 0) {\\r\\n            labelhash = keccak(self, idx + 1, len);\\r\\n        } else {\\r\\n            labelhash = bytes32(0);\\r\\n        }\\r\\n        newIdx = idx + len + 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x821c6d44d1c5e711ffbc6b7888abb947a0d80b16418c35ee120e89bc80293da8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611c0b380380611c0b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611b7a6100916000396000818160a40152610a3a0152611b7a6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a1cbcbaf11610050578063a1cbcbaf1461010c578063b4a858011461014b578063ec11c8231461016b57600080fd5b806301ffc9a7146100775780637b1039991461009f5780639061b923146100eb575b600080fd5b61008a610085366004611247565b61018e565b60405190151581526020015b60405180910390f35b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b6100fe6100f9366004611384565b610227565b60405161009692919061143d565b61011f61011a366004611475565b6103fc565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610096565b61015e6101593660046114b7565b61041d565b6040516100969190611523565b61017e610179366004611475565b6104e9565b6040516100969493929190611536565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061022157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008061023686866103fc565b50905073ffffffffffffffffffffffffffffffffffffffff811661026e575050604080516020810190915260008082529091506103f4565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f9061b92300000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa925050508015610314575060408051601f3d908101601f191682019092526103119181019061157f565b60015b156103c45780156103c2576103b682888888604051602401610338939291906115a1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9061b923000000000000000000000000000000000000000000000000000000001790527fb4a85801000000000000000000000000000000000000000000000000000000006107a1565b829350935050506103f4565b505b6103ef81857fb4a85801000000000000000000000000000000000000000000000000000000006107a1565b925090505b935093915050565b60008060008061040e86866000610927565b909450925050505b9250929050565b60606000808061042f85870187611601565b9250925092506104ca8289898460405160240161044e939291906115a1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915273ffffffffffffffffffffffffffffffffffffffff851690610ae4565b8060200190518101906104dd91906116a6565b98975050505050505050565b606060008060008060003073ffffffffffffffffffffffffffffffffffffffff16639061b923898961055560008d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050610b099050565b60405160240161056791815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f691f343100000000000000000000000000000000000000000000000000000000179052517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526105f8939291906004016115a1565b600060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261063d91908101906116db565b9150915060008280602001905181019061065791906116a6565b905060008061066583610be2565b915091506000803073ffffffffffffffffffffffffffffffffffffffff16639061b923858560405160240161069c91815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3b3b57de00000000000000000000000000000000000000000000000000000000179052517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261072c92919060040161172d565b600060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077191908101906116db565b9150915060008280602001905181019061078b919061175b565b959e959d50959b50995092975050505050505050565b606060006107af8585610e8f565b90503d81156107cc576107c3600082610f48565b92505050610920565b600481106109155760006107e260006004610f48565b90507f556f18300000000000000000000000000000000000000000000000000000000061080e82611778565b7fffffffff00000000000000000000000000000000000000000000000000000000160361091357600061084b600461084681866117f7565b610f48565b9050600080600080600085806020019051810190610869919061181a565b945094509450945094508c73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361090c573084848d8886866040516020016108bf9392919061194d565b60408051601f19818403018152908290527f556f183000000000000000000000000000000000000000000000000000000000825261090395949392916004016119a4565b60405180910390fd5b5050505050505b505b61091d610f9d565b50505b9392505050565b600080600085858581811061093e5761093e611a87565b919091013560f81c915050600081900361095f5750600091508190506103f4565b600061096b8286611ab6565b610976906001611ab6565b905060008787610987886001611ab6565b61099392859290611ac9565b6040516109a1929190611af3565b604051809103902090506000806109b98a8a86610927565b91509150600081846040516020016109db929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf00000000000000000000000000000000000000000000000000000000825260048201819052915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa5919061175b565b905073ffffffffffffffffffffffffffffffffffffffff811615610ad257975095506103f4945050505050565b50919a91995090975050505050505050565b60606109208383604051806060016040528060258152602001611b2060259139610fa7565b6000806000610b1885856110ce565b909250905081610ba45760018551610b3091906117f7565b8414610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610903565b50600091506102219050565b610bae8582610b09565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b805160609060009081908490610bf9816002611ab6565b67ffffffffffffffff811115610c1157610c116112a6565b6040519080825280601f01601f191660200182016040528015610c3b576020820181803683370190505b50945060009350808403610c9857600060f81b85600081518110610c6157610c61611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050915091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81015b828181518110610cce57610cce611a87565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003610da8578360f81b868260010181518110610d3457610d34611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084610d75846001840160ff881661119f565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350610e10565b600184019350828181518110610dc057610dc0611a87565b602001015160f81c60f81b868260010181518110610de057610de0611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8015610e3d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610cbc565b5083610e4e83600060ff871661119f565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110610c6157610c61611a87565b600073ffffffffffffffffffffffffffffffffffffffff83163b610f35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610903565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115610f6357610f636112a6565b6040519080825280601f01601f191660200182016040528015610f8d576020820181803683370190505b5090508183602083013e92915050565b3d6000803e3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b61104c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610903565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516110749190611b03565b600060405180830381855afa9150503d80600081146110af576040519150601f19603f3d011682016040523d82523d6000602084013e6110b4565b606091505b50915091506110c48282866111c3565b9695505050505050565b6000808351831061113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610903565b600084848151811061114f5761114f611a87565b016020015160f81c9050801561117b576111748561116e866001611ab6565b8361119f565b9250611180565b600092505b61118a8185611ab6565b611195906001611ab6565b9150509250929050565b82516000906111ae8385611ab6565b11156111b957600080fd5b5091016020012090565b606083156111d2575081610920565b8251156111e25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109039190611523565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461124457600080fd5b50565b60006020828403121561125957600080fd5b813561092081611216565b60008083601f84011261127657600080fd5b50813567ffffffffffffffff81111561128e57600080fd5b60208301915083602082850101111561041657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112fe576112fe6112a6565b604052919050565b600067ffffffffffffffff821115611320576113206112a6565b50601f01601f191660200190565b600082601f83011261133f57600080fd5b813561135261134d82611306565b6112d5565b81815284602083860101111561136757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006040848603121561139957600080fd5b833567ffffffffffffffff808211156113b157600080fd5b6113bd87838801611264565b909550935060208601359150808211156113d657600080fd5b506113e38682870161132e565b9150509250925092565b60005b838110156114085781810151838201526020016113f0565b50506000910152565b600081518084526114298160208601602086016113ed565b601f01601f19169290920160200192915050565b6040815260006114506040830185611411565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b6000806020838503121561148857600080fd5b823567ffffffffffffffff81111561149f57600080fd5b6114ab85828601611264565b90969095509350505050565b600080600080604085870312156114cd57600080fd5b843567ffffffffffffffff808211156114e557600080fd5b6114f188838901611264565b9096509450602087013591508082111561150a57600080fd5b5061151787828801611264565b95989497509550505050565b6020815260006109206020830184611411565b6080815260006115496080830187611411565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529385166040830152509216606090920191909152919050565b60006020828403121561159157600080fd5b8151801515811461092057600080fd5b60408152826040820152828460608301376000606084830101526000601f19601f850116820160608382030160208401526110c46060820185611411565b73ffffffffffffffffffffffffffffffffffffffff8116811461124457600080fd5b60008060006060848603121561161657600080fd5b8335611621816115df565b9250602084013561163181611216565b9150604084013567ffffffffffffffff81111561164d57600080fd5b6113e38682870161132e565b600082601f83011261166a57600080fd5b815161167861134d82611306565b81815284602083860101111561168d57600080fd5b61169e8260208301602087016113ed565b949350505050565b6000602082840312156116b857600080fd5b815167ffffffffffffffff8111156116cf57600080fd5b61169e84828501611659565b600080604083850312156116ee57600080fd5b825167ffffffffffffffff81111561170557600080fd5b61171185828601611659565b9250506020830151611722816115df565b809150509250929050565b6040815260006117406040830185611411565b82810360208401526117528185611411565b95945050505050565b60006020828403121561176d57600080fd5b8151610920816115df565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156117c05780818460040360031b1b83161693505b505050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610221576102216117c8565b805161181581611216565b919050565b600080600080600060a0868803121561183257600080fd5b855161183d816115df565b8095505060208087015167ffffffffffffffff8082111561185d57600080fd5b818901915089601f83011261187157600080fd5b815181811115611883576118836112a6565b8060051b6118928582016112d5565b918252838101850191858101908d8411156118ac57600080fd5b86860192505b838310156118e8578251858111156118ca5760008081fd5b6118d88f89838a0101611659565b83525091860191908601906118b2565b60408d0151909a5095505050508083111561190257600080fd5b61190e8a848b01611659565b955061191c60608a0161180a565b9450608089015192508083111561193257600080fd5b505061194088828901611659565b9150509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff841681527fffffffff00000000000000000000000000000000000000000000000000000000831660208201526060604082015260006117526060830184611411565b600060a0820173ffffffffffffffffffffffffffffffffffffffff88168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b82811015611a34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888703018452611a22868351611411565b955092840192908401906001016119e8565b50505050508281036040840152611a4b8187611411565b7fffffffff0000000000000000000000000000000000000000000000000000000086166060850152905082810360808401526104dd8185611411565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610221576102216117c8565b60008085851115611ad957600080fd5b83861115611ae657600080fd5b5050820193919092039150565b8183823760009101908152919050565b60008251611b158184602087016113ed565b919091019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a264697066735822122029103db29875833679a0fb7cceaa49c5d59f0db12e51eedb474aa599cc71530264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063a1cbcbaf11610050578063a1cbcbaf1461010c578063b4a858011461014b578063ec11c8231461016b57600080fd5b806301ffc9a7146100775780637b1039991461009f5780639061b923146100eb575b600080fd5b61008a610085366004611247565b61018e565b60405190151581526020015b60405180910390f35b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b6100fe6100f9366004611384565b610227565b60405161009692919061143d565b61011f61011a366004611475565b6103fc565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610096565b61015e6101593660046114b7565b61041d565b6040516100969190611523565b61017e610179366004611475565b6104e9565b6040516100969493929190611536565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061022157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008061023686866103fc565b50905073ffffffffffffffffffffffffffffffffffffffff811661026e575050604080516020810190915260008082529091506103f4565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f9061b92300000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa925050508015610314575060408051601f3d908101601f191682019092526103119181019061157f565b60015b156103c45780156103c2576103b682888888604051602401610338939291906115a1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9061b923000000000000000000000000000000000000000000000000000000001790527fb4a85801000000000000000000000000000000000000000000000000000000006107a1565b829350935050506103f4565b505b6103ef81857fb4a85801000000000000000000000000000000000000000000000000000000006107a1565b925090505b935093915050565b60008060008061040e86866000610927565b909450925050505b9250929050565b60606000808061042f85870187611601565b9250925092506104ca8289898460405160240161044e939291906115a1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915273ffffffffffffffffffffffffffffffffffffffff851690610ae4565b8060200190518101906104dd91906116a6565b98975050505050505050565b606060008060008060003073ffffffffffffffffffffffffffffffffffffffff16639061b923898961055560008d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050610b099050565b60405160240161056791815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f691f343100000000000000000000000000000000000000000000000000000000179052517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526105f8939291906004016115a1565b600060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261063d91908101906116db565b9150915060008280602001905181019061065791906116a6565b905060008061066583610be2565b915091506000803073ffffffffffffffffffffffffffffffffffffffff16639061b923858560405160240161069c91815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3b3b57de00000000000000000000000000000000000000000000000000000000179052517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261072c92919060040161172d565b600060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077191908101906116db565b9150915060008280602001905181019061078b919061175b565b959e959d50959b50995092975050505050505050565b606060006107af8585610e8f565b90503d81156107cc576107c3600082610f48565b92505050610920565b600481106109155760006107e260006004610f48565b90507f556f18300000000000000000000000000000000000000000000000000000000061080e82611778565b7fffffffff00000000000000000000000000000000000000000000000000000000160361091357600061084b600461084681866117f7565b610f48565b9050600080600080600085806020019051810190610869919061181a565b945094509450945094508c73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361090c573084848d8886866040516020016108bf9392919061194d565b60408051601f19818403018152908290527f556f183000000000000000000000000000000000000000000000000000000000825261090395949392916004016119a4565b60405180910390fd5b5050505050505b505b61091d610f9d565b50505b9392505050565b600080600085858581811061093e5761093e611a87565b919091013560f81c915050600081900361095f5750600091508190506103f4565b600061096b8286611ab6565b610976906001611ab6565b905060008787610987886001611ab6565b61099392859290611ac9565b6040516109a1929190611af3565b604051809103902090506000806109b98a8a86610927565b91509150600081846040516020016109db929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf00000000000000000000000000000000000000000000000000000000825260048201819052915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa5919061175b565b905073ffffffffffffffffffffffffffffffffffffffff811615610ad257975095506103f4945050505050565b50919a91995090975050505050505050565b60606109208383604051806060016040528060258152602001611b2060259139610fa7565b6000806000610b1885856110ce565b909250905081610ba45760018551610b3091906117f7565b8414610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610903565b50600091506102219050565b610bae8582610b09565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b805160609060009081908490610bf9816002611ab6565b67ffffffffffffffff811115610c1157610c116112a6565b6040519080825280601f01601f191660200182016040528015610c3b576020820181803683370190505b50945060009350808403610c9857600060f81b85600081518110610c6157610c61611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050915091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81015b828181518110610cce57610cce611a87565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003610da8578360f81b868260010181518110610d3457610d34611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084610d75846001840160ff881661119f565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350610e10565b600184019350828181518110610dc057610dc0611a87565b602001015160f81c60f81b868260010181518110610de057610de0611a87565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8015610e3d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610cbc565b5083610e4e83600060ff871661119f565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110610c6157610c61611a87565b600073ffffffffffffffffffffffffffffffffffffffff83163b610f35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610903565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115610f6357610f636112a6565b6040519080825280601f01601f191660200182016040528015610f8d576020820181803683370190505b5090508183602083013e92915050565b3d6000803e3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b61104c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610903565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516110749190611b03565b600060405180830381855afa9150503d80600081146110af576040519150601f19603f3d011682016040523d82523d6000602084013e6110b4565b606091505b50915091506110c48282866111c3565b9695505050505050565b6000808351831061113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610903565b600084848151811061114f5761114f611a87565b016020015160f81c9050801561117b576111748561116e866001611ab6565b8361119f565b9250611180565b600092505b61118a8185611ab6565b611195906001611ab6565b9150509250929050565b82516000906111ae8385611ab6565b11156111b957600080fd5b5091016020012090565b606083156111d2575081610920565b8251156111e25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109039190611523565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461124457600080fd5b50565b60006020828403121561125957600080fd5b813561092081611216565b60008083601f84011261127657600080fd5b50813567ffffffffffffffff81111561128e57600080fd5b60208301915083602082850101111561041657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112fe576112fe6112a6565b604052919050565b600067ffffffffffffffff821115611320576113206112a6565b50601f01601f191660200190565b600082601f83011261133f57600080fd5b813561135261134d82611306565b6112d5565b81815284602083860101111561136757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006040848603121561139957600080fd5b833567ffffffffffffffff808211156113b157600080fd5b6113bd87838801611264565b909550935060208601359150808211156113d657600080fd5b506113e38682870161132e565b9150509250925092565b60005b838110156114085781810151838201526020016113f0565b50506000910152565b600081518084526114298160208601602086016113ed565b601f01601f19169290920160200192915050565b6040815260006114506040830185611411565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b6000806020838503121561148857600080fd5b823567ffffffffffffffff81111561149f57600080fd5b6114ab85828601611264565b90969095509350505050565b600080600080604085870312156114cd57600080fd5b843567ffffffffffffffff808211156114e557600080fd5b6114f188838901611264565b9096509450602087013591508082111561150a57600080fd5b5061151787828801611264565b95989497509550505050565b6020815260006109206020830184611411565b6080815260006115496080830187611411565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529385166040830152509216606090920191909152919050565b60006020828403121561159157600080fd5b8151801515811461092057600080fd5b60408152826040820152828460608301376000606084830101526000601f19601f850116820160608382030160208401526110c46060820185611411565b73ffffffffffffffffffffffffffffffffffffffff8116811461124457600080fd5b60008060006060848603121561161657600080fd5b8335611621816115df565b9250602084013561163181611216565b9150604084013567ffffffffffffffff81111561164d57600080fd5b6113e38682870161132e565b600082601f83011261166a57600080fd5b815161167861134d82611306565b81815284602083860101111561168d57600080fd5b61169e8260208301602087016113ed565b949350505050565b6000602082840312156116b857600080fd5b815167ffffffffffffffff8111156116cf57600080fd5b61169e84828501611659565b600080604083850312156116ee57600080fd5b825167ffffffffffffffff81111561170557600080fd5b61171185828601611659565b9250506020830151611722816115df565b809150509250929050565b6040815260006117406040830185611411565b82810360208401526117528185611411565b95945050505050565b60006020828403121561176d57600080fd5b8151610920816115df565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156117c05780818460040360031b1b83161693505b505050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610221576102216117c8565b805161181581611216565b919050565b600080600080600060a0868803121561183257600080fd5b855161183d816115df565b8095505060208087015167ffffffffffffffff8082111561185d57600080fd5b818901915089601f83011261187157600080fd5b815181811115611883576118836112a6565b8060051b6118928582016112d5565b918252838101850191858101908d8411156118ac57600080fd5b86860192505b838310156118e8578251858111156118ca5760008081fd5b6118d88f89838a0101611659565b83525091860191908601906118b2565b60408d0151909a5095505050508083111561190257600080fd5b61190e8a848b01611659565b955061191c60608a0161180a565b9450608089015192508083111561193257600080fd5b505061194088828901611659565b9150509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff841681527fffffffff00000000000000000000000000000000000000000000000000000000831660208201526060604082015260006117526060830184611411565b600060a0820173ffffffffffffffffffffffffffffffffffffffff88168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b82811015611a34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888703018452611a22868351611411565b955092840192908401906001016119e8565b50505050508281036040840152611a4b8187611411565b7fffffffff0000000000000000000000000000000000000000000000000000000086166060850152905082810360808401526104dd8185611411565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610221576102216117c8565b60008085851115611ad957600080fd5b83861115611ae657600080fd5b5050820193919092039150565b8183823760009101908152919050565b60008251611b158184602087016113ed565b919091019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a264697066735822122029103db29875833679a0fb7cceaa49c5d59f0db12e51eedb474aa599cc71530264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findResolver(bytes)": {
        "details": "Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.",
        "params": {
          "name": "The name to resolve, in DNS-encoded and normalised form."
        },
        "returns": {
          "_0": "The Resolver responsible for this name, and the namehash of the full name."
        }
      },
      "resolve(bytes,bytes)": {
        "details": "Performs DNS name resolution for the supplied name and resolution data.",
        "params": {
          "data": "The resolution data, as specified in DNSIP-10.",
          "name": "The name to resolve, in normalised and DNS-encoded form."
        },
        "returns": {
          "_0": "The result of resolving the name."
        }
      },
      "resolveCallback(bytes,bytes)": {
        "details": "Callback function for `resolve`.",
        "params": {
          "extraData": "Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.",
          "response": "Response data returned by the target address that invoked the inner `OffchainData` revert."
        }
      },
      "reverse(bytes)": {
        "details": "Performs DNS name reverse resolution for the supplied reverse name.",
        "params": {
          "reverseName": "The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse"
        },
        "returns": {
          "_0": "The resolved name, the resolved address, the reverse resolver address, and the resolver address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an DNS name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}